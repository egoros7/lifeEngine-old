//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef BODY_H
#define BODY_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

//////////////////
// LIFEENGINE
//////////////////
#include <System\System.h>
#include <System\Ray.h>

namespace le
{
	//////////////////////////////////////////////////////////////////////
	/// \brief Класс физического тела для симуляции физики
	//////////////////////////////////////////////////////////////////////
	class DLL_API Body
	{
	public:

		//////////////////////////////////////////////////////////////////////
		/// \brief Сместить тело
		///
		/// \param[in] FactorMove Фактор смещения тела
		//////////////////////////////////////////////////////////////////////
		void Move( const glm::vec3& FactorMove );

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать позицию тела
		///
		/// \param[in] Position Позиция тела
		//////////////////////////////////////////////////////////////////////
		void SetPosition( const glm::vec3& Position );

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать тип трасировки
		/// \warning Если выбран тип трасировки сферой (TRACE_TYPE_SPHERE), то
		/// вторым параметром необходимо указать радиус сферы
		///
		/// \param[in] TraceType Тип трасировки
		/// \param[in] TraceRadius Радиус трасировки
		//////////////////////////////////////////////////////////////////////
		void SetTraceType( TraceType TraceType, float TraceRadius = 0.f );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить трасирующий луч для проверки столкновения с брашами
		///
		/// \return Трасирующий луч
		//////////////////////////////////////////////////////////////////////
		Ray& GetRay();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить позицию тела в текущем кадре
		///
		/// \return Позиция тела в текущем кадре
		//////////////////////////////////////////////////////////////////////
		glm::vec3& GetPosition();

		bool operator==( Body& Body );

	private:

		Ray			Ray;				///< Луч для проверки коллизии с брашами
	};
}

#endif // BODY_H