//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef ANIMATION_H
#define ANIMATION_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

//////////
// XML
//////////
#include <tinyxml.h>

//////////////////
// LIFEENGINE
//////////////////
#include <System\Logger.h>
#include <System\System.h>

namespace le
{
	//-------------------------------------------------------------------------//

	class Skeleton;

	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для работы с анимацией
	///
	/// Данный класс необходим для обновления анимации у модели
	//////////////////////////////////////////////////////////////////////
	class DLL_API Animation
	{
	public:

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Структура для хранения анимации одной кости
		//////////////////////////////////////////////////////////////////////
		struct DLL_API AnimationBone
		{
			vector<glm::mat4x4>		Frames; ///< Позиция кости на каждый кадр
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		Animation();

		//////////////////////////////////////////////////////////////////////
		/// \brief Загрузить анимацию модели
		///
		/// \param[in] Animation Указатель на xml тег Animation 
		/// \param[in] MaxFrames Макс. кол-во кадров у анимации
		/// \return true если все прошло успешно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool LoadAnimation( TiXmlElement* Animation, int MaxFrames = 0 );

		//////////////////////////////////////////////////////////////////////
		/// \brief Начать проигрывать анимацию
		///
		/// \param[in] IsLoop Зациклиность анимации
		//////////////////////////////////////////////////////////////////////
		void Play( bool IsLoop = false );

		//////////////////////////////////////////////////////////////////////
		/// \brief Поставить на паузу тек. анимацию
		//////////////////////////////////////////////////////////////////////
		void Pause();

		//////////////////////////////////////////////////////////////////////
		/// \brief Остановить тек. анимацию
		//////////////////////////////////////////////////////////////////////
		void Stop();

		//////////////////////////////////////////////////////////////////////
		/// \brief Обновить тек. анимацию
		//////////////////////////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////////////////////////
		/// \brief Установить скелет модели
		///
		/// \param[in] Skeleton Указатель на скелет
		//////////////////////////////////////////////////////////////////////
		void SetSkeleton( Skeleton& Skeleton );

		//////////////////////////////////////////////////////////////////////
		/// \brief Установить частоту кадров
		///
		/// \param[in] FPS Частота кадров
		//////////////////////////////////////////////////////////////////////
		void SetFPS( float FPS );

		//////////////////////////////////////////////////////////////////////
		/// \brief Проигрывается ли анимация
		///
		/// \return true если да, а иначе false
		//////////////////////////////////////////////////////////////////////
		bool IsPlaying();

	private:

		bool							Loop; ///< Зацикленость анимации
		bool							Playing; ///< Проигрывается ли анимация
		int								NextFrame; ///< Следующий кадр
		int								MaxFrames; ///< Мак. кол-во кадров
		float							NowFrame; ///< Текущий кадр
		float							DeltaFrame; ///< Разница тек. кадра и следующего	
		Skeleton*						Skeleton; ///< Скелет модели
		glm::mat4x4						MatrixInterpolated; ///< Интерполированая матрица кадра
		glm::mat4x4*					MatrixNowFrame; ///< Текущая матрица кадра
		glm::mat4x4*					MatrixNextFrame; ///< Следующая матрица кадра
		map<string, AnimationBone>		AnimationBones; ///< Анимации костей скелета
	};

	//-------------------------------------------------------------------------//
}

#endif // ANIMATION_H
