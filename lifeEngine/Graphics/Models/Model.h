//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef MODEL_H
#define MODEL_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <map>
using namespace std;

////////////////
// LIFEENGINE
///////////////
#include <Graphics\Models\Mesh.h>
#include <Graphics\Scene.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для работы с моделью
	//////////////////////////////////////////////////////////////////////
	class DLL_API Model
	{
	public:
		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		Model();

		//////////////////////////////////////////////////////////////////////
		/// \brief Дуструктор
		//////////////////////////////////////////////////////////////////////
		~Model();

		//////////////////////////////////////////////////////////////////////
		/// \brief Загрузить модель
		///		
		/// \param[in] NameModel Идентификатор модели
		/// \param[in] RouteToFile Путь к файлу
		/// \return true если все прошло успешно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool LoadModel( const string& NameModel, const string& RouteToFile );

		//////////////////////////////////////////////////////////////////////
		/// \brief Загрузить модель с меша
		///		
		/// \param[in] Mesh меш для модели
		//////////////////////////////////////////////////////////////////////
		void LoadModel( Mesh& Mesh );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить на сцену
		///		
		/// \param[in] Scene Сцена
		//////////////////////////////////////////////////////////////////////
		void AddToScene( Scene& Scene );

		//////////////////////////////////////////////////////////////////////
		/// \brief Удалить с сцены
		//////////////////////////////////////////////////////////////////////
		void RemoveFromScene();

		//////////////////////////////////////////////////////////////////////
		/// \brief Указать сцену (необходима для уничтожения со сцены)
		///		
		/// \param[in] Scene Сцена
		//////////////////////////////////////////////////////////////////////
		void SetScene( Scene* Scene );

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать позицию модели в пространстве
		///		
		/// \param[in] Position Позиция
		//////////////////////////////////////////////////////////////////////
		void SetPosition( const glm::vec3& Position );

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать угол поворота модели
		///		
		/// \param[in] Rotation Угол вращения по осям Эйлера
		//////////////////////////////////////////////////////////////////////
		void SetRotation( const glm::vec3& Rotation );

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать угол поворота модели
		///		
		/// \param[in] Rotation Кватернион вращения
		//////////////////////////////////////////////////////////////////////
		void SetRotation( const glm::quat& Rotation );

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать масштаб модели
		///		
		/// \param[in] Scale Масштаб
		//////////////////////////////////////////////////////////////////////
		void SetScale( const glm::vec3& Scale );
		
		//////////////////////////////////////////////////////////////////////
		/// \brief Сместить модель
		///		
		/// \param[in] FactorMove Фактор смещения
		//////////////////////////////////////////////////////////////////////
		void Move( const glm::vec3& FactorMove );

		//////////////////////////////////////////////////////////////////////
		/// \brief Отмасштабировать модель
		///		
		/// \param[in] Scale Масштаб
		//////////////////////////////////////////////////////////////////////
		void Scale( const glm::vec3& FactorScale );
		
		//////////////////////////////////////////////////////////////////////
		/// \brief Повернуть модель
		///		
		/// \param[in] Rotation Угол вращения по осям Эйлера
		//////////////////////////////////////////////////////////////////////
		void Rotate( const glm::vec3& FactorRotate );

		//////////////////////////////////////////////////////////////////////
		/// \brief Повернуть модель
		///		
		/// \param[in] Rotation Кватернион вращения
		//////////////////////////////////////////////////////////////////////
		void Rotate( const glm::quat& FactorRotate );

		//////////////////////////////////////////////////////////////////////
		/// \brief Активировать модель для рендера
		///		
		/// \param[in] IsRender Рендерить ли модель
		//////////////////////////////////////////////////////////////////////
		void SetRender( bool IsRender = true );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить информацию меша для рендера
		///		
		/// \return map<GLuint, Scene::InfoMesh>&
		//////////////////////////////////////////////////////////////////////
		map<GLuint, Scene::InfoMesh>& GetRenderMesh();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить менеджер анимаций
		///		
		/// \return AnimationManager*
		//////////////////////////////////////////////////////////////////////
		AnimationManager* GetAnimationManager();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить позицию модели в пространстве
		///		
		/// \return Позиция модели в пространстве
		//////////////////////////////////////////////////////////////////////
		glm::vec3& GetPosition();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить масштаб модели
		///		
		/// \return Масштаб модели
		//////////////////////////////////////////////////////////////////////
		glm::vec3& GetScale();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить самую низкую вершину
		///
		/// \return Самая низкая вершина в ограничивающем теле
		//////////////////////////////////////////////////////////////////////
		glm::vec3& GetMinVertex();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить самую высокую вершину
		///
		/// \return Самая высокая вершина в ограничивающем теле
		//////////////////////////////////////////////////////////////////////
		glm::vec3& GetMaxVertex();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить поворот модели
		///		
		/// \return Поворот модели
		//////////////////////////////////////////////////////////////////////
		glm::quat& GetRotation();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить матрицу трансформации модели
		///		
		/// \return Матрица трансформации модели
		//////////////////////////////////////////////////////////////////////
		glm::mat4& GetTransformation();

		//////////////////////////////////////////////////////////////////////
		/// \brief Нет ли скелета
		///
		/// \return bool
		//////////////////////////////////////////////////////////////////////
		bool IsNoSkeleton();

	private:

		bool							NoSkeleton;				///< Нет ли скелета
		bool							IsRender;				///< Рендерить ли модель

		Scene*							Scene;					///< Сцена на котором находится модель
		Skeleton						Skeleton;				///< Скелет модели
		AnimationManager				AnimationManager;		///< Менеджер анимаций
		BoundingBox						BoundingBox;			///< Ограничивающее тело модели

		GLuint							VertexBuffer;			///< Вершиный буффер

		glm::vec3						Position;				///< Позиция модели в пространстве
		glm::vec3						ScaleModel;				///< Масштаб модели
		glm::quat						Rotation;				///< Поворот модели

		glm::mat4x4						MatrixPosition;			///< Матрица позиции
		glm::mat4x4						MatrixRotation;			///< Матрица вращения
		glm::mat4x4						MatrixScale;			///< Матрица масштабирования
		glm::mat4x4						MatrixTransformation;	///< Матрица трансформации (Pos+Scal+Rot)

		vector<GLuint>					IndexBuffers;			///< Массив индексных буфферов
		vector<GLuint>					ArrayBuffers;			///< Массив VAO буфферов
		map<GLuint, Scene::InfoMesh>	RenderMesh;				///< Информация о меше
	};

	//-------------------------------------------------------------------------//
}

#endif // MODEL_H

