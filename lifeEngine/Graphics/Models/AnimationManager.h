//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef ANIMATION_MANAGER_H
#define ANIMATION_MANAGER_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <vector>
using namespace std;

//////////
// XML
//////////
#include <tinyxml.h>

//////////////////
// LIFEENGINE
//////////////////
#include <System\Logger.h>
#include <System\System.h>
#include <Graphics\Scene.h>
#include <Graphics\Models\Animation.h>

namespace le
{
	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для работы с анимациями
	///
	/// Данный класс необходим для управления анимациями у модели
	//////////////////////////////////////////////////////////////////////
	class DLL_API AnimationManager
	{
	public:
		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		AnimationManager();

		//////////////////////////////////////////////////////////////////////
		/// \brief Загрузить анимации модели
		///
		/// \param[in] Animations Указатель на xml тег Animations 
		/// \return true если все прошло успешно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool LoadAnimations( TiXmlElement* Animations );

		//////////////////////////////////////////////////////////////////////
		/// \brief Начать проигрывать анимацию
		///
		/// \param[in] NameAnimation Имя анимации
		/// \param[in] IsLoop Зациклиность анимации
		//////////////////////////////////////////////////////////////////////
		void Play( const string& NameAnimation, bool IsLoop = false );

		//////////////////////////////////////////////////////////////////////
		/// \brief Поставить на паузу тек. анимацию
		//////////////////////////////////////////////////////////////////////
		void Pause();

		//////////////////////////////////////////////////////////////////////
		/// \brief Остановить тек. анимацию
		//////////////////////////////////////////////////////////////////////
		void Stop();

		//////////////////////////////////////////////////////////////////////
		/// \brief Обновить тек. анимацию
		//////////////////////////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////////////////////////
		/// \brief Удалить анимацию
		///
		/// \param[in] NameAnimation Имя анимации
		//////////////////////////////////////////////////////////////////////
		void DeleteAnimation( const string& NameAnimation );

		//////////////////////////////////////////////////////////////////////
		/// \brief Удалить все анимации
		//////////////////////////////////////////////////////////////////////
		void DeleteAllAnimations();

		//////////////////////////////////////////////////////////////////////
		/// \brief Установить скелет модели
		///
		/// \param[in] Skeleton Указатель на скелет
		//////////////////////////////////////////////////////////////////////
		void SetSkeleton( Skeleton& Skeleton );

		//////////////////////////////////////////////////////////////////////
		/// \brief Установить информацию о меше
		///
		/// \param[in] RenderMesh Меш для рендера
		//////////////////////////////////////////////////////////////////////
		void SetRenderMesh( map<GLuint, Scene::InfoMesh>& RenderMesh );

		//////////////////////////////////////////////////////////////////////
		/// \brief Проигрывается ли анимация
		///
		/// \return true если да, а иначе false
		//////////////////////////////////////////////////////////////////////
		bool IsPlaying();

	private:

		Animation*							CurrentAnimation; ///Текущая анимация
		Skeleton*							Skeleton; ///< Скелет модели
		map<string, Animation>				Animations; ///< Массив анимаций
		map<GLuint, Scene::InfoMesh>*		RenderMesh; ///< Информация о меше
	};

	//-------------------------------------------------------------------------//
}

#endif // ANIMATION_MANAGER_H

