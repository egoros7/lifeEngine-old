//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef BASE_ENTITY_H
#define BASE_ENTITY_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <vector>
#include <map>
using namespace std;

//////////////
// OPENGL
//////////////
#include <glew\glew.h>
#include <glm\glm.hpp>

//////////
// XML
//////////
#include <tinyxml.h>

//////////////////
// LIFEENGINE
//////////////////
#include <System\System.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для хранения энтити-объектов карты
	///
	/// Данный класс необходим для хранения энтити-объектов карты, например
	/// точка старта игрока, спавн npc и т.д
	//////////////////////////////////////////////////////////////////////
	class DLL_API BaseEntity
	{
	public:
		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		///
		/// \param[in] Values Переменные энтити-объекта
		//////////////////////////////////////////////////////////////////////
		BaseEntity( const map<string, string>& Values );

		//////////////////////////////////////////////////////////////////////
		/// \brief Обновить энтити-объект
		//////////////////////////////////////////////////////////////////////
		virtual void Update() = 0;

		//////////////////////////////////////////////////////////////////////
		/// \brief Выполнить действие энтити-объекта
		//////////////////////////////////////////////////////////////////////
		virtual void Action() = 0;
	
		string					NameEntity;			///< Название энтити
		glm::vec3				Position;			///< Позиция энтити в мире
		glm::mat4				Transformation;		///< Матрица трансформации	

		map<string, int>		ArrayInt;			///< Массив значений типа int
		map<string, float>		ArrayFloat;			///< Массив значений типа float
		map<string, glm::vec3>	ArrayVec3;			///< Массив значений типа vec3
		map<string, string>		ArrayString;		///< Массив значений типа string
	};

	//-------------------------------------------------------------------------//
}

#endif // BASE_ENTITY_H