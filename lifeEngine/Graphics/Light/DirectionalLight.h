//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef DIRECTIONAL_LIGHT_H
#define DIRECTIONAL_LIGHT_H
#pragma warning( push )

#pragma warning( disable: 4251 ) 

#define COMPILING_LIBRARY
#include <DllGlobal.h>

//////////////
// OPENGL
//////////////
#include <glew\glew.h>
#include <glm\glm.hpp>

////////////////
// LIFEENGINE
///////////////
#include <Graphics\Light\BaseLight.h>
#include <Graphics\Light\LightQuad.h>
#include <Graphics\Frustum.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс направленного света
	///
	/// Данный класс необходим для работы направленного света
	//////////////////////////////////////////////////////////////////////
	class DLL_API DirectionalLight : public BaseLight
	{
	public:

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		DirectionalLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		///
		/// \param[in] Position Направление света
		/// \param[in] Color Цвет света
		/// \param[in] Intensivity Интенсивность света
		/// \param[in] Specular Отражение света
		//////////////////////////////////////////////////////////////////////
		DirectionalLight( const glm::vec3& Position, const glm::vec4& Color, float Intensivity = 1.f, const glm::vec4& Specular = glm::vec4( 0.0f, 0.0f, 0.0f, 1.0f ) );

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор копирования
		//////////////////////////////////////////////////////////////////////
		DirectionalLight( const DirectionalLight& Copy );

		//////////////////////////////////////////////////////////////////////
		/// \brief Деструктор
		//////////////////////////////////////////////////////////////////////
		~DirectionalLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать направление света
		///		
		/// \param[in] Position Направление света
		//////////////////////////////////////////////////////////////////////
		void SetPosition( const glm::vec3& Position );

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать центр направленого света
		///		
		/// \param[in] Center Центр направленого света
		//////////////////////////////////////////////////////////////////////
		void SetCenter( const glm::vec3& Center );

		le::DirectionalLight& operator=( const DirectionalLight& Copy );

		LightQuad			Quad; ///< Квадрат света

		glm::vec3			Center; ///< Центр направленого света
	};

	//-------------------------------------------------------------------------//
}

#pragma warning( pop )
#endif // DIRECTIONAL_LIGHT_H

