//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef LIGHT_MANAGER_H
#define LIGHT_MANAGER_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <vector>
using namespace std;

////////////////
// LIFEENGINE
///////////////
#include <Graphics\Light\PointLight.h>
#include <Graphics\Light\DirectionalLight.h>
#include <Graphics\Light\SpotLight.h>
#include <Graphics\Scene.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс-менеджер для работы с источниками света
	//////////////////////////////////////////////////////////////////////
	class DLL_API LightManager
	{
	public:

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		LightManager();

		//////////////////////////////////////////////////////////////////////
		/// \brief Деструктор
		//////////////////////////////////////////////////////////////////////
		~LightManager();

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить все источники света на сцену
		//////////////////////////////////////////////////////////////////////
		void AddLightsToScene( Scene& Scene );

		//////////////////////////////////////////////////////////////////////
		/// \brief Построить карты теней
		///
		/// \param[in] Level Уровень
		/// \param[in] GeometryStaticModels Массив статичных моделей
		/// \param[in] GeometryAnimationModels Массив динамических моделей
		//////////////////////////////////////////////////////////////////////
		void BuildShadowMaps( Level& Level, map<GLuint, vector<le::Scene::InfoMesh*> >& GeometryStaticModels, map<GLuint, vector<le::Scene::InfoMesh*> >& GeometryAnimationModels );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить точечный источник света 
		/// \details Этот метод создает точечный источник по переданным
		/// характеристикам. По умолчанию источник статичный, чтобы
		/// сделать его динамичным надо получить его объект у менеджера
		/// и вызвать метод SetDinamicLight (у статичного света не обновляются
		/// карты теней)
		///
		/// \param[in] NameLight Название света
		/// \param[in] Radius Радиус света
		/// \param[in] Position Позиция света
		/// \param[in] Color Цвет света
		/// \param[in] Intensivity Интенсивность света
		/// \param[in] Specular Отражение света
		//////////////////////////////////////////////////////////////////////
		void AddPointLight( const string& NameLight, float Radius, const glm::vec3& Position, const glm::vec4& Color, float Intensivity = 1.f, const glm::vec4& Specular = glm::vec4( 45.f, 45.f, 45.f, 255.f ) );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить точечный источник света 
		/// \details Этот метод создает копию точечного света и добовляет
		/// ее в менеджер
		///
		/// \param[in] NameLight Название света
		/// \param[in] PointLight Точечный свет
		//////////////////////////////////////////////////////////////////////
		void AddPointLight( const string& NameLight, const PointLight& PointLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить направленый источник света 
		/// \details Этот метод создает направленый источник по переданным
		/// характеристикам. По умолчанию источник статичный, чтобы
		/// сделать его динамичным надо получить его объект у менеджера
		/// и вызвать метод SetDinamicLight (у статичного света не обновляются
		/// карты теней)
		///
		/// \param[in] NameLight Название света
		/// \param[in] Position Направление света
		/// \param[in] Color Цвет света
		/// \param[in] Intensivity Интенсивность света
		/// \param[in] Specular Отражение света
		//////////////////////////////////////////////////////////////////////
		void AddDirectionalLight( const string& NameLight, const glm::vec3& Position, const glm::vec4& Color, float Intensivity = 1.f, const glm::vec4& Specular = glm::vec4( 45.f, 45.f, 45.f, 255.f ) );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить направленый источник света 
		/// \details Этот метод создает копию направленого света и добовляет
		/// ее в менеджер
		///
		/// \param[in] NameLight Название света
		/// \param[in] DirectionalLight Направленый свет
		//////////////////////////////////////////////////////////////////////
		void AddDirectionalLight( const string& NameLight, const DirectionalLight& DirectionalLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить прожекторный источник света 
		/// \details Этот метод создает прожекторный источник по переданным
		/// характеристикам. По умолчанию источник статичный, чтобы
		/// сделать его динамичным надо получить его объект у менеджера
		/// и вызвать метод SetDinamicLight (у статичного света не обновляются
		/// карты теней)
		///
		/// \param[in] NameLight Название света
		/// \param[in] Radius Радиус конуса у света
		/// \param[in] Height Высота конуса у света
		/// \param[in] Rotation Угол поворота света
		/// \param[in] Position Позиция света
		/// \param[in] Color Цвет света
		/// \param[in] Intensivity Интенсивность света
		/// \param[in] Specular Отражение света
		//////////////////////////////////////////////////////////////////////
		void AddSpotLight( const string& NameLight, float Radius, float Height, const glm::vec3& Rotation, const glm::vec3& Position, const glm::vec4& Color, float Intensivity = 1.f, const glm::vec4& Specular = glm::vec4( 45.f, 45.f, 45.f, 255.f ) );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить прожекторный источник света 
		/// \details Этот метод создает копию направленого света и добовляет
		/// ее в менеджер
		///
		/// \param[in] NameLight Название света
		/// \param[in] SpotLight Прожекторный свет
		//////////////////////////////////////////////////////////////////////
		void AddSpotLight( const string& NameLight, const SpotLight& SpotLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить точеный источник света
		///
		/// \param[in] NameLight Название света
		//////////////////////////////////////////////////////////////////////
		void DestroyPointLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить направленый источник света
		///
		/// \param[in] NameLight Название света
		//////////////////////////////////////////////////////////////////////
		void DestroyDirectionalLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить прожекторный источник света
		///
		/// \param[in] NameLight Название света
		//////////////////////////////////////////////////////////////////////
		void DestroySpotLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить все точечные источники света
		//////////////////////////////////////////////////////////////////////
		void DestroyAllPointLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить все направленные источники света
		//////////////////////////////////////////////////////////////////////
		void DestroyAllDirectionalLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить все прожекторные источники света
		///
		/// \param[in] NameLight Название света
		//////////////////////////////////////////////////////////////////////
		void DestroyAllSpotLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить все источники света
		//////////////////////////////////////////////////////////////////////
		void DestroyAllLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Указать сцену (необходима для уничтожения со сцены)
		///		
		/// \param[in] Scene Сцена
		//////////////////////////////////////////////////////////////////////
		void SetScene( Scene* Scene );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить точеный источник света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return Указатель на источник света, если нету вернет NULL
		//////////////////////////////////////////////////////////////////////
		PointLight* GetPointLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить направленый источник света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return Указатель на источник света, если нету вернет NULL
		//////////////////////////////////////////////////////////////////////
		DirectionalLight* GetDirectionalLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить прожекторный источник света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return Указатель на источник света, если нету вернет NULL
		//////////////////////////////////////////////////////////////////////
		SpotLight* GetSpotLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив точеных источников света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return Массив точечных источников света с данным именем
		//////////////////////////////////////////////////////////////////////
		vector<PointLight*> GetPointLights( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив направленных источников света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return Массив направленных источников света с данным именем
		//////////////////////////////////////////////////////////////////////
		vector<DirectionalLight*> GetDirectionalLights( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив прожекторных источников света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return Массив прожекторных источников света с данным именем
		//////////////////////////////////////////////////////////////////////
		vector<SpotLight*> GetSpotLights( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить весь массив точеных источников света
		///
		/// \return Массив точечных источников света
		//////////////////////////////////////////////////////////////////////
		vector<PointLight>& GetAllPointLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить весь массив направленных источников света
		///
		/// \return Массив направленных источников света
		//////////////////////////////////////////////////////////////////////
		vector<DirectionalLight>& GetAllDirectionalLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить весь массив прожекторных источников света
		///
		/// \return Массив прожекторных источников света
		//////////////////////////////////////////////////////////////////////
		vector<SpotLight>& GetAllSpotLight();

	private:

		Scene*								Scene;					///< Сцена на котором находятся источники света	
		Shader*								ShadowMapRender;		///< Шейдер для построения карты теней

		vector<PointLight>					PointLights;			///< Массив точечных источников света
		vector<SpotLight>					SpotLights;				///< Массив прожекторных источников света
		vector<DirectionalLight>			DirectionalLights;		///< Массив направленых источников света 
	};

	//-------------------------------------------------------------------------//
}

#endif // LIGHT_MANAGER_H
