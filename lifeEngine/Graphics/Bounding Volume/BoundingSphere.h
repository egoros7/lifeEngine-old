//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef BOUNDING_SPHERE_H
#define BOUNDING_SPHERE_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>
#pragma warning( push )

#pragma warning( disable: 4251 ) 

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <vector>
using namespace std;

//////////////
// OPENGL
//////////////
#include <glew\glew.h>
#include <glm\glm.hpp>
#include <glm/gtx/transform.hpp>

////////////////
// LIFEENGINE
///////////////
#include <System\Query.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс ограничивающего тела (сфера)
	///
	/// Данный класс используеться для оптимального (быстрого) отсичения
	/// невидимой геометрии и описания объемов света
	//////////////////////////////////////////////////////////////////////
	class DLL_API BoundingSphere
	{
	public:
		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		BoundingSphere();

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор копирывания
		//////////////////////////////////////////////////////////////////////
		BoundingSphere( BoundingSphere& Copy );

		//////////////////////////////////////////////////////////////////////
		/// \brief Деструктор
		//////////////////////////////////////////////////////////////////////
		~BoundingSphere();

		//////////////////////////////////////////////////////////////////////
		/// \brief Инициализировать ограничивающее тело
		///		
		/// \param[in] Radius Радиус сферы
		//////////////////////////////////////////////////////////////////////
		void InitSphere( const float& Radius );

		//////////////////////////////////////////////////////////////////////
		/// \brief Провести тест на перекртие объекта
		//////////////////////////////////////////////////////////////////////
		void QueryTest();

		//////////////////////////////////////////////////////////////////////
		/// \brief Отрендерить объект
		//////////////////////////////////////////////////////////////////////
		void RenderSphere();

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать позицию сферы
		///		
		/// \param[in] Position Позиция сферы
		//////////////////////////////////////////////////////////////////////
		void SetPosition( const glm::vec3& Position );

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать радиус сферы
		///		
		/// \param[in] Radius Радиус сферы
		//////////////////////////////////////////////////////////////////////
		void SetRadius( const float& Radius );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить радиус тела
		///		
		/// \return  float. Радиус сферы
		//////////////////////////////////////////////////////////////////////
		float GetRadius();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить матрицу трансформации
		///		
		/// \return  glm::mat4&
		//////////////////////////////////////////////////////////////////////
		glm::mat4& GetTransformation();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить позицию
		///		
		/// \return  glm::vec3&
		//////////////////////////////////////////////////////////////////////
		glm::vec3& GetPosition();

		BoundingSphere& operator=( const BoundingSphere& Copy );

		Query				Query; ///< Объект для проверки перекрытия

	private:
		//////////////////////////////////////////////////////////////////////
		/// \brief Создать сферу
		///		
		/// \param[in] Radius Радиус сферы
		/// \return  vector<glm::vec3>&
		//////////////////////////////////////////////////////////////////////
		vector<glm::vec3>	CreateSphere( const float& Radius );

		float				Radius; ///< Радиус сферы

		GLuint				ArrayBuffer; ///< VAO буффер
		GLuint				VertexBuffer; ///< Вершиный буффер
		GLuint				IndexBuffer; ///< Индексный буффер

		glm::vec3			Position; ///< Позиция сферы
		glm::mat4			Transformation; ///< Матрица трансформации
	};

	//-------------------------------------------------------------------------//
}

#pragma warning( pop )
#endif // BOUNDING_SPHERE_H

