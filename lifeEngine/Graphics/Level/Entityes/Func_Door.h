//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef FUNC_DOOR_H
#define FUNC_DOOR_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

//////////////////
// LIFEENGINE
//////////////////
#include <Graphics\Level\Entityes\BaseEntity.h>
#include <Graphics\Level\BSPInfo.h>

namespace le
{
	//////////////////////////////////////////////////////////////////////
	/// \brief Класс энтити-объекта для работы двери
	//////////////////////////////////////////////////////////////////////
	class DLL_API Func_Door : public BaseEntity
	{
	public:

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		///
		/// \param[in] Values Переменные энтити-объекта
		//////////////////////////////////////////////////////////////////////
		Func_Door( map<string, string>& Values );

		//////////////////////////////////////////////////////////////////////
		/// \brief Обновить энтити-объект
		//////////////////////////////////////////////////////////////////////
		void Update();

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать модель для энтити
		///
		/// \param[in] BSPModel Модель для энтити
		//////////////////////////////////////////////////////////////////////
		void SetModel( BSPModel& BSPModel );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить индекс модели в массиве
		///
		/// \return Индекс модели в массиве. Если модели нет, то вернет -1
		//////////////////////////////////////////////////////////////////////
		int GetIdModel();

	private:
		
		bool				InOpen;						///< Находится ли дверь в открытом состоянии (или открывается)
		bool				InClose;					///< Находится ли дверь в закрытом состоянии (или закрывается)

		int					IdModel;					///< Индекс модели в массиве
		float				DonePercentag;				///< Процент готовности анимации открытия/закрытия двери (от 0 до 1)
		float				SpeedOpen;					///< Скорость открытия двери
		float				SpeedClose;					///< Скорость закрытия двери

		BSPModel*			Model;						///< Модель привязанная к энтити	

		glm::vec3			Local_Max;					///< Ограничивающее тело (бокс) максимальная позиция в локальных координатах
		glm::vec3			Local_Min;					///< Ограничивающее тело (бокс) минимальная позиция в локальных координатах

		glm::quat			StartRotation;				///< Кватернион старта вращения  
		glm::quat			EndRotation;				///< Кватернион конца вращения
		glm::quat			Rotation;					///< Кватернион вращения

		glm::mat4			MatrixPosition;				///< Матрица позиции
	};
}

#endif // FUNC_DOOR_H
