//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef SKYBOX_H
#define SKYBOX_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <string>
using namespace std;

//////////////
// OPENGL
//////////////
#include <glew\glew.h>
#include <glm\glm.hpp>

//////////////////
// SFML
//////////////////
#include <SFML\Graphics.hpp>
using namespace sf;

//////////////////
// LIFEENGINE
//////////////////
#include <System\Logger.h>
#include <System\System.h>

namespace le
{
	//-------------------------------------------------------------------------//

	class Camera;

	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для работы с скайбоксом
	///
	/// Данный класс используеться для работы с скайбоксом
	//////////////////////////////////////////////////////////////////////
	class DLL_API Skybox
	{
	public:
		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		Skybox();

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор копирывания
		//////////////////////////////////////////////////////////////////////
		Skybox( Skybox& Copy );

		//////////////////////////////////////////////////////////////////////
		/// \brief Деструктор
		//////////////////////////////////////////////////////////////////////
		~Skybox();

		//////////////////////////////////////////////////////////////////////
		/// \brief Загрузить текстуру скайбокса
		/// \details Данный метод загружает текстуру скайбокса по сторонам.
		/// Например, с начало текстура для левой стороны, потом для правой и т.д.
		/// В Route следует передавать путь к текстуре, например, ../tex/skybox.png, а
		/// хранить надо таким образом -> [имя скайбокса][_сторона][.формат]. Например,
		/// skybox_left.png, skybox_right.png. Главное с '_'
		///		
		/// \param[in] Route Путь к текстуре
		/// \return true если все прошло успешно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool LoadSkybox( const string& Route );

		//////////////////////////////////////////////////////////////////////
		/// \brief Отрендерить скайбокс
		//////////////////////////////////////////////////////////////////////
		void RenderSkybox();

		//////////////////////////////////////////////////////////////////////
		/// \brief Отвязать камеру игрока от скайбокса
		//////////////////////////////////////////////////////////////////////
		void RemovePlayerCamera();

		//////////////////////////////////////////////////////////////////////
		/// \brief Привязать камеру игрока к скайбоксу
		/// \details Данная камера необходима для рендера скайбокса
		///
		/// \param[in] Camera Камера игрока
		//////////////////////////////////////////////////////////////////////
		void SetPlayerCamera( Camera& Camera );

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать размер скайбокса
		///
		/// \param[in] Size Размер
		//////////////////////////////////////////////////////////////////////
		void SetSizeSkybox( float Size );

		Skybox& operator=( const Skybox& Copy );

	private:

		bool				IsLoadSkybox; ///< Загружена ли текстура для скайбокса
		float				SizeSkybox; ///< Размер скайбокса

		GLuint				CubeTexture; ///< Кубическая текстура скайбокса
		GLuint				VertexBuffer; ///< Вершиный буффер
		GLuint				IndexBuffer; ///< Индексный буффер
		GLuint				ArrayBuffer; ///< VAO буффер

		string				RouteSkyBox; ///< Путь к текстуре скайбокса
		Shader*				SkyboxRender; ///< Шейдер рендера скайбокса
		glm::vec3*			PositionCamera; ///< Позиция камеры
		glm::mat4*			ProjectionMatrix; ///< Матрица проекции
		glm::mat4*			ViewMatrix;  ///< Матрица вида		
	};

	//-------------------------------------------------------------------------//
}

#endif // SKYBOX_H
